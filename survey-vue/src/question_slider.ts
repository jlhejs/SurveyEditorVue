
import { ItemValue } from "./itemvalue";
import { Question } from "./question";
import { Serializer } from "./jsonobject";
import { QuestionFactory } from "./questionfactory";
import { LocalizableString } from "./localizablestring";
import { settings } from "./settings";

/**
 * A Model for a rating question.
 */
export class QuestionSliderModel extends Question {
  private rates: Array<ItemValue>;
  private isChange: Boolean=false;

  rateValuesChangedCallback: () => void;

  constructor(public name: string) {
    super(name);
    this.rates = this.createItemValues("rates");
    var self = this;
    this.registerFunctionOnPropertyValueChanged("rates", function() {
      self.fireCallback(self.rateValuesChangedCallback);
    });
    this.onPropertyChanged.add(function(sender: any, options: any) {
      if (
        options.name == "rateMin" ||
        options.name == "rateMax" ||
        options.name == "rateStep"
      ) {
        self.fireCallback(self.rateValuesChangedCallback);
      }
    });

    var locMinRateDescriptionValue = this.createLocalizableString(
      "minRateDescription",
      this,
      true
    );
    var locMaxRateDescriptionValue = this.createLocalizableString(
      "maxRateDescription",
      this,
      true
    );
    locMinRateDescriptionValue.onGetTextCallback = function(text) {
      return text ? text + " " : text;
    };
    locMaxRateDescriptionValue.onGetTextCallback = function(text) {
      return text ? " " + text : text;
    };
  }
  protected hasRequiredError(): boolean {
    if(!this.isRequired){ return false}
    if(!this.isChange){ return true }
    return false
  }
  public elIsChange(){
    this.isChange=true
  }
  public clearIncorrectValues() {
    if (this.range) {
      var val = this.value;
      if (!val) return;
      if (!Array.isArray(val) || val.length == 0) {
        this.clearValue();
        return;
      }
      var newValue = [];
      for (var i = 0; i < val.length; i++) {
        if (!this.hasUnknownValue(val[i], true)) {
          newValue.push(val[i]);
        }
      }
      if (newValue.length == val.length) return;
      if (newValue.length == 0) {
        this.clearValue();
      } else {
        this.value = newValue;
      }
    } else {
      super.clearIncorrectValues();
    }
  }
  protected getValueCore() {
    var value = super.getValueCore();
    if(value !== undefined) {
      return value;
    }
    if(this.range) {
      return [];
    }
    return  value;
  }
  public onSurveyLoad() {
    super.onSurveyLoad();
    this.fireCallback(this.rateValuesChangedCallback);
  }

  /**
   * The list of rate items. Every item has value and text. If text is empty, the value is rendered. The item text supports markdown. If it is empty the array is generated by using rateMin, rateMax and rateStep properties.
   * @see rateMin
   * @see rateMax
   * @see rateStep
   */
  public get rateValues(): Array<any> {
    return this.rates;
  }
  public set rateValues(val: Array<any>) {
    this.setPropertyValue("rates", val);
  }
  /**
   * This property is used to generate rate values if rateValues array is empty. It is the first value in the rating. The default value is 1.
   * @see rateValues
   * @see rateMax
   * @see rateStep
   */
  public get rateMin(): number {
    return this.getPropertyValue("rateMin");
  }
  public set rateMin(val: number) {
    if (!this.isLoadingFromJson && val > this.rateMax - this.rateStep)
      val = this.rateMax - this.rateStep;
    this.setPropertyValue("rateMin", val);
  }
  /**
   * This property is used to generate rate values if rateValues array is empty. It is the last value in the rating. The default value is 5.
   * @see rateValues
   * @see rateMin
   * @see rateStep
   */
  public get rateMax(): number {
    return this.getPropertyValue("rateMax");
  }
  public set rateMax(val: number) {
    if (!this.isLoadingFromJson && val < this.rateMin + this.rateStep)
      val = this.rateMin + this.rateStep;
    this.setPropertyValue("rateMax", val);
  }
  /**
   * This property is used to generate rate values if rateValues array is empty. It is the step value. The number of rate values are (rateMax - rateMin) / rateStep. The default value is 1.
   * @see rateValues
   * @see rateMin
   * @see rateMax
   */
  public get rateStep(): number {
    return this.getPropertyValue("rateStep");
  }
  public set rateStep(val: number) {
    if (val <= 0) val = 1;
    if (!this.isLoadingFromJson && val > this.rateMax - this.rateMin)
      val = this.rateMax - this.rateMin;
    this.setPropertyValue("rateStep", val);
  }
  protected getDisplayValueCore(keysAsText: boolean, value: any): any {
    var res = ItemValue.getTextOrHtmlByValue(
      this.visibleRateValues,
      value
    );
    return !!res ? res : value;
  }
  get visibleRateValues(): ItemValue[] {
    if (this.rateValues.length > 0) return this.rateValues;
    var res = [];
    var value = this.rateMin;
    while (
      value <= this.rateMax &&
      res.length < settings.sliderMaximumRateValueCount
    ) {
      res.push(new ItemValue(value));
      value += this.rateStep;
    }
    return res;
  }
  public getType(): string {
    return "slider";
  }
  supportGoNextPageAutomatic() {
    return true;
  }
  public supportComment(): boolean {
    return true;
  }
  public supportOther(): boolean {
    return true;
  }
  /**
   * The description of minimum (first) item.
   */
  public get minRateDescription(): string {
    return this.getLocalizableStringText("minRateDescription");
  }
  public set minRateDescription(val: string) {
    this.setLocalizableStringText("minRateDescription", val);
  }
  get locMinRateDescription(): LocalizableString {
    return this.getLocalizableString("minRateDescription");
  }
  /**
   * The description of maximum (last) item.
   */
  public get maxRateDescription(): string {
    return this.getLocalizableStringText("maxRateDescription");
  }
  public set maxRateDescription(val: string) {
    this.setLocalizableStringText("maxRateDescription", val);
  }
  get locMaxRateDescription(): LocalizableString {
    return this.getLocalizableString("maxRateDescription");
  }

    /**
   * ，通过设置show-stops属性可以显示间断点
   */
  public get showStops	(): boolean {
    return this.getPropertyValue("showStops",false);
  }
  public set showStops(val: boolean) {
    this.setPropertyValue("showStops", val);
  }
  /**
   * ，是否显示输入框，仅在非范围选择时有效
   */
  public get showInput	(): boolean {
    if(this.range)return false
    return this.getPropertyValue("showInput",false);
  }
  public set showInput(val: boolean) {
    this.setPropertyValue("showInput", val);
  }
  /**
   * 输入框的尺寸
   */
  public get inputBoxSize	(): string {
    return this.getPropertyValue("inputBoxSize","mini");
  }
  public set inputBoxSize(val: string) {
    this.setPropertyValue("inputBoxSize", val);
  }
  /**
   * 是否显示 tooltip
   */
  public get showTooltip	(): boolean {
    return this.getPropertyValue("showTooltip",true);
  }
  public set showTooltip(val: boolean) {
    this.setPropertyValue("showTooltip", val);
  }
  /**
   * 是否显示Label
   */
  public get showLabel	(): boolean {
    return this.getPropertyValue("showLabel",false);
  }
  public set showLabel(val: boolean) {
    this.setPropertyValue("showLabel", val);
  }
    /**
   * ，通过设置show-stops属性可以显示间断点
   */
  public get showInputControls	(): boolean {
    if(this.range)return false
    return this.getPropertyValue("showInputControls",false);
  }
  public set showInputControls(val: boolean) {
    this.setPropertyValue("showInputControls", val);
  }
    /**
   * 设置range即可开启范围选择，此时绑定值是一个数组，其元素分别为最小边界值和最大边界值
   */
   public get range	(): boolean {
     return this.getPropertyValue("range",false);
   }
   public set range(val: boolean) {
     this.setPropertyValue("range", val);
   }
    /**
   * 设置 marks 属性可以展示标记
   */
   public get marks	(): any {
    if(!this.showLabel) return {}
    var label:any={}
    for(var i=0;i<this.visibleRateValues.length;i++){
      if (this.minRateDescription) { label[this.visibleRateValues[i].value] = this.minRateDescription; break}
      if (this.maxRateDescription) { label[this.visibleRateValues[i].value] = this.maxRateDescription; break}
      if(this.visibleRateValues[i].text){
        label[this.visibleRateValues[i].value]=this.visibleRateValues[i].text
        break
      }
    }
    return label
    return this.getPropertyValue("marks","{{value}}");
   }
   public set marks(val: any) {
     this.setPropertyValue("marks", val);
   }
    /**
   * 设置vertical可使 Slider 变成竖向模式，此时必须设置高度height属性
   */
   public get vertical	(): boolean {
     return this.getPropertyValue("vertical",false);
   }
   public set vertical(val: boolean) {
     this.setPropertyValue("vertical", val);
   }
}

Serializer.addClass(
  "slider",
  [
    { name: "hasComment:boolean", layout: "row" },
    {
      name: "commentText",
      serializationProperty: "locCommentText",
      layout: "row"
    },
    {
      name: "rateValues:itemvalue[]"
    },
    { name: "rateMin:number", default: 0 },
    { name: "rateMax:number", default: 10 },
    { name: "rateStep:number", default: 1, minValue: 1 },
    { name: "showStops:boolean", default: false },
    { name: "range:boolean", default: false },
    { name: "vertical:boolean", default: false },
    { name: "showInput:boolean", default: false },
    { name: "showInputControls:boolean", default: false },
    { name: "showTooltip:boolean", default: true },
    { name: "showLabel:boolean", default: false },
    { name: "inputBoxSize:string", 
      default: "small" ,
      choices: [
        "large",
        "medium",
      "small",
      "mini",
      
    ]},
    {
      name: "minRateDescription",
      alternativeName: "mininumRateDescription",
      serializationProperty: "locMinRateDescription"
    },
    {
      name: "maxRateDescription",
      alternativeName: "maximumRateDescription",
      serializationProperty: "locMaxRateDescription"
    }
  ],
  function() {
    return new QuestionSliderModel("");
  },
  "question"
);
QuestionFactory.Instance.registerQuestion("slider", name => {
  return new QuestionSliderModel(name);
});

